#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
orbs:
  aws-eks: circleci/aws-eks@2.2.0  # Assurez-vous d'utiliser la derni√®re version de l'orb AWS EKS
  aws-ecr: circleci/aws-ecr@x.y.z
jobs:
  build_app_flask:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.17.5/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
  push_container:
    docker:
      - image: cimg/go:1.17
      - image: cimg/python:3.10
    steps:
      - checkout
      # ... steps for building/testing app ...

      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
          
      - run:
          name: Install aws clie
          command: | 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
      - run:
          name: "push to aws"
          command: |
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT}.dkr.ecr.us-east-1.amazonaws.com
            docker build -t capstone .
            docker tag capstone:latest ${AWS_ACCOUNT}.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
            docker push ${AWS_ACCOUNT}.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
  aws-eks/update-kubeconfig:
    cluster-name: capstone-cluster-prod
    install-kubectl: true
  aws-eks/update-kube-manifests:
    cluster-name: capstone-cluster-prod
    kubeconfig: $HOME/.kube/config
    manifest-glob: "infra/eks-sample-deployment.yml"
workflows:
  version: 2
  job_app_flask:
    jobs:
      - build_app_flask
      - push_container:
          requires: [build_app_flask]
      - aws-eks/update-kubeconfig
      - aws-eks/update-kube-manifests

      
